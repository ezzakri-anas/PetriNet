README pour le Réseau de Petri 
==============================

INTRODUCTION
------------
Ce projet implémente un simulateur de réseau de Petri en Java, destiné à modéliser des systèmes à événements discrets. Il comprend des classes pour les places, les transitions, et différents types d'arcs, et est adapté à l'enseignement et à la recherche dans des domaines comme l'automatisation et la recherche opérationnelle.

CONFIGURATION REQUISE
---------------------
- Java Development Kit (JDK) : Version 8 ou supérieure.
- Environnement de développement intégré (IDE) :  Eclipse, ou autres.
- JUnit 5 : Pour exécuter les tests unitaires.

INSTALLATION
------------
1. Clonage du dépôt : Utilisez `git clone [URL]` pour cloner le dépôt du projet.
2. Configuration de l'IDE :
   - Ouvrez le dossier du projet dans votre IDE.
   - Assurez-vous que le JDK est configuré correctement.
   - Configurez JUnit 5 si nécessaire.

EXÉCUTION DU CODE
-----------------
1. Ouvrez la classe `PetriNetwork.java` dans votre IDE.
2. Utilisez les fonctionnalités de l'IDE pour exécuter le programme.
	- Vous pouvez créer créer à l aide des contructeur des classes et utiliser la fonction ShowPetriNet qui montre bien le bon fonctionnement du reseau Pétri.(Regarder le fichier test)

EXÉCUTION DES TESTS
-------------------
1. Naviguez vers le dossier `test` dans votre projet.
2. Sélectionnez les tests à exécuter et utilisez les commandes de l'IDE pour les lancer.(verifier les tests avec JUnit: clique droit sur le fichier de la classe / coverage as / Junit)

MODÈLES DE CONCEPTION ET ARCHITECTURE
-------------------------------------
- Héritage et polymorphisme : Utilisés dans les classes `ArcZero` et `ArcVideur`.
- Encapsulation : Chaque composant est encapsulé dans sa propre classe.
- Modularité : Le projet est divisé en modules clairement définis.

JUSTIFICATION DES AJUSTEMENTS APPORTES AUX DIFFERENTS CLASSES PAR RAPPORT AU DIAGRAMME DE CLASSE
------------------------------------------------------------------------------------------------
1. Le nom des méthodes a été changer afin de rester coherents et utiliser qu'une seul langue, nous avons remarqué que certeines methodes étaient en francais et d'autres en anglais, on a décider de les garder en anglais vu que java comprend mieux l'anglais. Cependant, nous avons préféré garder les commentaires en francais vu vu que ce code a plus de chance d'etre lu par un public francais.
2. Ajout de nouvelles méthodes dans les classes suivantes:
	- Arc:une seul methode ajoutée:setVideurOrZero() qui permet de determiner si modifier la nature d'un arc.
	- ArcVideur:-
	- ArcZero:on a preferé enlever fire car celle de la classe mere est suffisante.
	- PetriNetwork:
		-- addArcZero et addArcVideur ont été ajouté, car addArc ne premettait pas de distinguer dans l'ajout entre arc videur ou zero. la distinction est necessaire car la methode addArc ajouter aux entré ou à la sortie alors que les arcs speciaux sont toujours des arcs d entrées( à la transition).
		-- getArc est une methode pour retourner la listes des arcs dns le petri. Necessaires pour acceder aux arcs à partir du petri.
		-- showPetri:permet de visualiser les liaisons et les entités présente dans le petri. On n'envisageait pas de l'ajouter au debut pisqu'elle n'est pas primordiale au fonctionnement du petri, mais on a été demandé de la réaliser.
		-- certaines fonction de création d'entitée dans le petri comme :create_transition_for_test, create_place_for_test ,create_arc_for_test,create_arc_videur_for_test et create_arc_zero_for_test ont été crée pur simplifier et factoriser la creation des entitées: arc, place, transition ... leur contructeur les initialisent sans les ajouter dans les listes de PetriNet et les listes de Transition, ceci est la raison principale de leurcréation.
	- Place: removeTokenNbre() qui permet de retirer des jetons d un place, on peut coder sans cette fonction juste en utilisant setTokenNbre(), mais cela permet de factoriser le code. 
	- Transition:Aucune methode n'a été ajouté, mais tirable() et fire() implementé déjàdans petrinet, il s 'est averé qu il pouvait etre inutile dans Transition.

CONTRIBUTEURS
-------------
- LAGSSAIBI Adam
- EZZAKRI Anas



